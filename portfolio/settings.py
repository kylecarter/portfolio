"""
Django settings for portfolio project.
Generated by 'django-admin startproject' using Django 1.8.4.
For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import dj_database_url

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
SITE_ROOT = os.path.dirname(BASE_DIR)  
SITE_NAME = os.path.basename(BASE_DIR)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ['SECRET_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
if os.environ['DEBUG_MODE']:
    DEBUG = True
else:
    DEBUG = False

ALLOWED_HOSTS = []

# Application definition
INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 'pipeline',
    'rest_framework',
    'djrichtextfield',
    'compressor',
    'compressor_toolkit',
    'portfolio',
    'api',
    'todo',
    'blog',
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

# PIPELINE = {
#     'PIPELINE_ENABLED': DEBUG,
#     'SHOW_ERRORS_INLINE': DEBUG,
#     'COMPILERS': (
#         'pipeline_browserify.compiler.BrowserifyCompiler',
#     ),
#     'JS_COMPRESSOR': 'pipeline.compressors.uglifyjs.UglifyJSCompressor',
#     'BROWSERIFY_ARGUMENTS': '-d -t [ babelify --presets [ es2015 react ] ]',
#     'DISABLE_WRAPPER': False,
#     'JAVASCRIPT': {
#         'browserify': {
#             'source_filenames': (
#                 'static/babel/entry.browserify.js',
#             ),
#             'output_filename': 'js/application.js',
#         }
#     }
# }

COMPRESS_PRECOMPILERS = (
    ('text/x-scss', 'django_libsass.SassCompiler'),
    ('module', 'compressor_toolkit.precompilers.ES6Compiler'),
)

COMPRESS_NODE_MODULES = '/node_modules'
COMPRESS_ES6_COMPILER_CMD = 'export NODE_PATH="{paths}" && browserify "{infile}" -o "{outfile}" --node -t [ babelify --presets [ es2015 react ] ]' 

# if DEBUG:
#     COMPRESS_ES6_COMPILER_CMD = 'export NODE_PATH="{paths}" && browserify "{infile}" -o "{outfile}" -d --node -t [ envify --NODE_ENV development, babelify --presets [ es2015 react ] ]' 
# else:
#     COMPRESS_ES6_COMPILER_CMD = 'export NODE_PATH="{paths}" && browserify "{infile}" -o "{outfile}" --node -t [ envify --NODE_ENV production, babelify --presets [ es2015 react ] ]' 

ROOT_URLCONF = 'portfolio.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'portfolio.wsgi.application'

DJRICHTEXTFIELD_CONFIG = {
    'js': ['tinymce/tinymce.min.js'],
    'init_template': 'djrichtextfield/init/tinymce.js',
    'settings': {
        'menubar': False,
        'plugins': 'link code lists',
        'toolbar': 'code | undo redo | cut copy paste | styleselect | link bullist numlist',
        'width': '100%'
    },
}

# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.environ['DATABASE_NAME'],
        'USER': os.environ['POSTGRES_USERNAME'],
        'PASSWORD': os.environ['POSTGRES_PASSWORD'],
        'HOST': os.environ['DATABASE_HOST'],
        'PORT': os.environ['DATABASE_PORT'],
    },
}

db_from_env = dj_database_url.config(conn_max_age=500)
DATABASES['default'].update(db_from_env)


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/Chicago'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder',
    # 'pipeline.finders.PipelineFinder',
)

# Simplified static file serving.
# https://warehouse.python.org/project/whitenoise/

# STATICFILES_STORAGE = 'pipeline.storage.PipelineCachedStorage'
STATICFILES_STORAGE = 'whitenoise.django.GzipManifestStaticFilesStorage'

API_KEYS = {
    'GOOGLE': os.environ['GOOGLE_API_KEY'], 
}